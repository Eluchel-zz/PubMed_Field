<?php
/**
 * @file
 * The main file the PubMed Field module.
 *
 * @todo Do we want to  update the result list only when saving the field?
 * @todo Implement wizpsermessages.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the field 'pubmed_field_term'.
 */
function pubmed_field_field_info() {
  return array(
    'pubmed_field_term' => array(
      'label' => t('PudMed Term'),
      'description' => t('Stores PubMed terms used for querying the PubMed database (http://www.ncbi.nlm.nih.gov/pubmed?term=)'),
      'default_widget' => 'pubmed_field_textfield',
      'default_formatter' => 'pubmed_field_list',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Nothing to validate yet.
 *
 * @see pubmed_field_textfield_validate()
 *
 * @todo Implement validation.
 */
function pubmed_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['pubmed_term'])) {
      if (FALSE) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'pubmed_field_term_invalid',
          'message' => t('Error message'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function pubmed_field_field_is_empty($item, $field) {
  return empty($item['pubmed_term']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We provide a simple formatter that lists links to the publications queried
 * using the given term.
 */
function pubmed_field_field_formatter_info() {
  return array(
    // This displays a list of links to the search results of the given term.
    'pubmed_field_list' => array(
      'label' => t('Simple list of links to the publications given by querying the PubMed db using this field`s input as the term.'),
      'field types' => array('pubmed_field_term'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Implements views for the formater defined in
 * pubmed_field_field_formatter_info().
 *
 * @see pubmed_field_field_formatter_info()
 *
 * @todo Not implemented yet!
 */
function pubmed_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {

    // This formatter simply outputs a list of links to the publications.
    case 'pubmed_field_list':

      foreach ($items as $delta => $item) {
        // The outpur. $item['pubmed_ids'] is the array of publications.
        if (!is_array($item['pubmed_ids'])) $item['pubmed_ids'] = array();
        $element[$delta] = array(
          '#markup' => theme('pubmed_field_list', array('publications' => $item['pubmed_ids']))
        );
      }

      break;

  }

  return $element;
}

/**
 * Implements hook_theme().
 *
 * Tells drupal about the module's theme implementations. This module implements
 * one theme implementation for each formatter view.
 */
function pubmed_field_theme($existing, $type, $theme, $path) {
  return array(
    'pubmed_field_list' => array(
      'variables' => array('publications' => array()),
      'template' => 'pubmed_field-list'
    )
  );
}

/**
* A custom theme function for the publication list.
*
* This implementation wraps theme 'item_list'. Rather then  u sing this in the
* formatter view, this wrapper allows overriding it.
*
* @see theme_item_list()
* @todo depreciated
*/
function theme_pubmed_field_list($variables) {
  $output = theme('item_list', array(
    'items' => $variables['publications'],
    'type' => 'ul',
  ));
  return $output;
}

/**
 * Implements hook_field_widget_info().
 *
 * Provides a simple text widget as input for the term.
 *
 * @see pubmed_field_field_widget_form()
 */
function pubmed_field_field_widget_info() {
  return array(
    'pubmed_field_textfield' => array(
      'label' => t('Textfield'),
      'field types' => array('pubmed_field_term'),
    ),
  );
}

/**
* Implements hook_field_widget_form().
*
* We provide the form widget for our field. For now it is only a simple text
* field but we could implement some kind of live search feature. We are adding
* pubmed_field_validate_id() as a validation callback validate intput
* and process the query.
*
* @see pubmed_field_validate_id()
*/
function pubmed_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $element;
  $widget['#delta'] = $delta;

  // Defines a simple text widget holding the term string.
  switch ($instance['widget']['type']) {
    case 'pubmed_field_textfield':
      $widget['#type'] = 'textfield';
      $widget['#weight'] = 1;
      $widget['#title'] = t('PubMed Search Term');
      $widget['#default_value'] = isset($items[$delta]['pubmed_term']) ? $items[$delta]['pubmed_term'] : '';
      $widget['#size'] = 60;
      $widget['#maxlength'] = 255;
      $widget['#description'] = t('Put in the search term for a PubMed query. The results will be listed. If you don`t know what to put in visit') .
        ' ' . l('Search Builder', 'http://www.ncbi.nlm.nih.gov/pubmed/advanced') . '. ' .
        t('Use <em>@example_term</em> to query all publications by author <em>@example_author</em> for example.',
          array('@example_term' => 'Thimme R[Author]', '@example_author' => '`Thimme R`')) . ' ' .
        t('Note: The number of results will be limited to @max.', array('@max' => variable_get('pubmed_field_limit_results', 100)));
      break;
  }
  $element['pubmed_term'] = $widget;

  // Add  the outupdate checkbox.
  $element['autoupdate'] = $widget;
  $element['autoupdate']['#type'] = 'checkbox';
  $element['autoupdate']['#weight'] = 2;
  $element['autoupdate']['#title'] = t('Autoupdate');
  $element['autoupdate']['#description'] = t('Check this if you want to update results automatically once in a while.');
  $element['autoupdate']['#access'] = variable_get('pubmed_field_allow_autoupdate', FALSE);
  $element['autoupdate']['#default_value'] = isset($items[$delta]['autoupdate']) ? $items[$delta]['autoupdate'] : 0;

  // Add a hidden field for for the result ids.
  $element['pubmed_ids'] = $widget;
  $element['pubmed_ids']['#type'] = 'hidden';
  $element['pubmed_ids']['#element_validate'] = array('pubmed_field_validate_id');

  // Turn element into fieldset
  $element['#type'] = 'fieldset';

  return $element;
}

/**
 * A validation callback for pubmed_field_field_widget_form().
 *
 * We use this to query the Pubmed db and set results as values of the given
 * field.
 *
 * @see pubmed_field_field_widget_form()
 * @see pubmed_field_field_presave()
 */
function pubmed_field_validate_id($element, &$form_state) {
  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  // Only do something if correct field was found.
  if (!isset($form_state['values'][$field_name][$element['#language']][$delta]['pubmed_ids']))
    return;

  // Get the input term string to use for the query.
  $pubmed_term = (string)$form_state['values'][$field_name][$element['#language']][$delta]['pubmed_term'];
  // If no term is specified, set result NULL for result ids and return.
  if (empty($pubmed_term)) {
    form_set_value($element, NULL, $form_state);
    return;
  }

  $pubmed_ids = _pubmed_field_query_pubmed($pubmed_term);

  // Set the result ids.
  if (empty($pubmed_ids)) form_set_value($element, NULL, $form_state);
  else form_set_value($element, $pubmed_ids, $form_state);
}

/**
 * Queries the PubMed db.
 *
 * @param $term
 *   The term to query for.
 *
 * @return
 *   Returns an associative array of the form (id => title).
 */
function _pubmed_field_query_pubmed($term) {
  watchdog('pubmed_field', 'Query pubmed for term: @term.', array('@term' => $term));
  // Start the PubMed Query.
  try {
    if (!module_load_include('inc', 'pubmed_field', 'pubmed_field.entrezclient'))
    return;
    $client = new PubmedFieldEntrezClient;
    $client->setTerm($term);
    // Set maximum number of results.
    $client->setReturnMax((int)variable_get('pubmed_field_limit_results', 100));
    $result = $client->search(0); // Start search query.
    // $pubmed_ids will store the result ids of the query.
    $idlist = (array)$result->IdList;
    $pubmed_ids = is_array($idlist['Id']) ? array_combine($idlist['Id'], $idlist['Id'])
      : array($idlist['Id'] => $idlist['Id']);
    // Fetch results
    $results = $client->fetchRecords(0, TRUE);
    foreach ($results as $result) {
      $result = (array)$result;
      if (isset($result['Id']) && isset($result['Item']) && isset($result['Item'][5]) && is_string($result['Item'][5])) {
        $pubmed_ids[$result['Id']] = new stdClass();
        $pubmed_ids[$result['Id']]->pubmedid = (int)$result['Id'];
        $pubmed_ids[$result['Id']]->title = check_plain($result['Item'][5]);
        $pubmed_ids[$result['Id']]->journal = check_plain($result['Item'][2]);
        //$timestamp = strtotime($result['Item'][0]);
        //$pubmed_ids[$result['Id']]->date_published = $timestamp ? format_date($timestamp, 'short') : '';
        $pubmed_ids[$result['Id']]->date_published = check_plain($result['Item'][0]);
        $pubmed_ids[$result['Id']]->pubmed_url = 'http://www.ncbi.nlm.nih.gov/pubmed/' . (int)$result['Id'];
      }
    }
    // Set defaults if item not fetched.
    $dummy = new stdClass();
    $dummy->pubmedid = NULL;
    $dummy->title = '';
    $dummy->date_published = NULL;
    $dummy->pubmed_url = '';
    foreach ($pubmed_ids as $pubmed_id => $publication) {
      if (!is_object($pubmed_ids[$pubmed_id])) {
        $pubmed_ids[$pubmed_id] = $dummy;
        $pubmed_ids[$pubmed_id]->id = (int)$pubmed_ids[$pubmed_id];
        $pubmed_ids[$pubmed_id]->pubmed_url = 'http://www.ncbi.nlm.nih.gov/pubmed/' . (int)$pubmed_ids[$pubmed_id];
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('The PubMed query could not be perfomed.'), 'error');
    $pubmed_ids = array();
  }
  return $pubmed_ids;
}

/**
 * Implements hook_field_presave().
 *
 * Serialize pubmed_ids.
 */
function pubmed_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'pubmed_field_term') {
    foreach ($items as $delta => $item) {
      if (isset($item['pubmed_ids'])) {
        $items[$delta]['pubmed_ids'] = serialize($item['pubmed_ids']);
      }
    }
  }
}

/**
 * Implements hook_field_load().
 *
 * unserializes pubmed_ids.
 */
function pubmed_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if ($field['type'] == 'pubmed_field_term') {
        $items[$id][$delta]['pubmed_ids'] = isset($item['pubmed_ids']) ? 
          unserialize($item['pubmed_ids']) : array();
      }
    }
  }
}


/**
 * Implements hook_cronapi().
 *
 * This hook is provided by elysia_cron and we use it to overwrite the default
 * period pubmed_field_cron() is executed.
 *
 * Note that this module does not require elysia_cron to be active so this will
 * just be ignored if not.
 *
 * @see pubmed_field_cron()
 */
function pubmed_field_cronapi($op, $job = NULL) {
  $items['pubmed_field_cron'] = array(
      'rule' => '1 2 * * *', // Once a day.
  );
  return $items;
}

/**
 * Implements hook_cron().
 *
 * Updates all fields marked for autoupdate.
 *
 * @todo Split tasks into cron queue and use cronapi.
 */
function pubmed_field_cron() {
  $result = db_query('SELECT field_name FROM {field_config} WHERE type = :type',
    array(':type' => 'pubmed_field_term'));

  while ($field = $result->fetchObject()) {
    $subquery = db_select('field_data_' . $field->field_name, 'fd');
    $subquery->addField('fd', $field->field_name . '_pubmed_term', 'term');
    $subquery->addField('fd', $field->field_name . '_pubmed_ids', 'pubmed_ids');
    $subquery->addField('fd', 'entity_id', 'nid');
    $subresult = $subquery->execute();
    while ($field_data = $subresult->fetchObject()) {
      // Get new results from pubmed.
      $new_pubmed_ids = serialize(_pubmed_field_query_pubmed($field_data->term));
      //kpr($field_data->pubmed_ids);
      //kpr($new_pubmed_ids);
      // Only move on if pubmed result differs from internal data set.
      if ($new_pubmed_ids == $field_data->pubmed_ids) continue;
      // Update field table.
      $update = db_update('field_data_' . $field->field_name)
      ->fields(array($field->field_name . '_pubmed_ids' =>
        $new_pubmed_ids))
      ->condition($field->field_name . '_pubmed_term', $field_data->term)
      ->execute();
      // Update field revision table.
      $update = db_update('field_revision_' . $field->field_name)
      ->fields(array($field->field_name . '_pubmed_ids' =>
        $new_pubmed_ids))
      ->condition($field->field_name . '_pubmed_term', $field_data->term)
      ->execute();
      // Send messages about new publications.
      pubmed_field_invoke_pubmed_field_update(unserialize($new_pubmed_ids), unserialize($field_data->pubmed_ids), $field_data->nid);
    }
    // Clear the cache
    drupal_flush_all_caches();
  }
}

/**
 * Triggers hook pubmed_field_update preprocessing pubmed data first.
 *
 * @param $new_pubmed_ids
 *   An associative array of the form (id => title) representing new state of
 *   the field.
 * @param $old_pubmed_ids
 *   An associative array of the form (id => title) representing old state of
 *   the field.
 * @param $nid
 *   The node id the pubmed field is associated to.
 */
function pubmed_field_invoke_pubmed_field_update($new_pubmed_ids, $old_pubmed_ids, $nid) {
  $diff = array();
  $offset = 7200; // 2 hours offest for message raising.
  foreach ($new_pubmed_ids as $id => $publication) {
    // If old id not set, the new one is really new, obviously.
    if (isset($old_pubmed_ids[$id])) {
      $diff[$id] = $publication;
      continue;
    }
    // Compare publication dates.
    $oldtime = empty($old_pubmed_ids[$id]->date_published) ? 0 : strtotime($old_pubmed_ids[$id]->date_published);
    $newtime = empty($new_pubmed_ids[$id]->date_published) ? 0 : strtotime($new_pubmed_ids[$id]->date_published);
    if ($newtime > ($oldtime + $offset)) $diff[$id] = $publication;
  }
  module_invoke_all('pubmed_field_update', $diff, $nid);
}